 //Me when code dump


 if (state[SDL_SCANCODE_ESCAPE]){
        Game_Loop = false;
    } else if (state[SDL_SCANCODE_RIGHT]){
        Player.Velocity.x += constant::PLAYER_VELOCITY;
    } else if (state[SDL_SCANCODE_LEFT]){
        Player.Velocity.x -= constant::PLAYER_VELOCITY;
    } else if (state[SDL_SCANCODE_UP]){
        Player.Velocity.y -= constant::PLAYER_VELOCITY;
    } else if (state[SDL_SCANCODE_DOWN]){
        Player.Velocity.y += constant::PLAYER_VELOCITY;
    }




void updateForest( std::vector <std::vector <Tile>>& vector , SDL_Rect Rect , Tile tile )
{
        // Segment the player into grid of smaller
        // points that are 10x10 pixels
    int GridXStart = Rect.x / constant::PIXEL_SIZE;
    int GridXEnd = (Rect.x + Rect.w) / constant::PIXEL_SIZE;
    int GridYStart = Rect.y / constant::PIXEL_SIZE;
    int GridYEnd = (Rect.y + Rect.h) / constant::PIXEL_SIZE;

    for (int gridX = GridXStart; gridX <= GridXEnd; ++gridX)
    {
        for (int gridY = GridYStart; gridY <= GridYEnd; ++gridY)
        {
            if (gridX >= 0 && gridX < vector.size() && gridY >= 0 && gridY < vector[0].size())
            {
                if ( vector[gridX][gridY] != tile  )
                    vector[gridX][gridY] = tile;
            }
        }
    }
}
